// Code generated by MockGen. DO NOT EDIT.
// Source: ./workflow/idempotent.go

// Package workflow is a generated GoMock package.
package workflow

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIdempotent is a mock of Idempotent interface.
type MockIdempotent struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotentMockRecorder
}

// MockIdempotentMockRecorder is the mock recorder for MockIdempotent.
type MockIdempotentMockRecorder struct {
	mock *MockIdempotent
}

// NewMockIdempotent creates a new mock instance.
func NewMockIdempotent(ctrl *gomock.Controller) *MockIdempotent {
	mock := &MockIdempotent{ctrl: ctrl}
	mock.recorder = &MockIdempotentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotent) EXPECT() *MockIdempotentMockRecorder {
	return m.recorder
}

// IsStepAlreadyExecuted mocks base method.
func (m *MockIdempotent) IsStepAlreadyExecuted(ctx context.Context, step, idempotentKey string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStepAlreadyExecuted", ctx, step, idempotentKey)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsStepAlreadyExecuted indicates an expected call of IsStepAlreadyExecuted.
func (mr *MockIdempotentMockRecorder) IsStepAlreadyExecuted(ctx, step, idempotentKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStepAlreadyExecuted", reflect.TypeOf((*MockIdempotent)(nil).IsStepAlreadyExecuted), ctx, step, idempotentKey)
}

// MarkStepAsExecuted mocks base method.
func (m *MockIdempotent) MarkStepAsExecuted(ctx context.Context, idempotentKey, step string, result interface{}, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkStepAsExecuted", ctx, idempotentKey, step, result, err)
}

// MarkStepAsExecuted indicates an expected call of MarkStepAsExecuted.
func (mr *MockIdempotentMockRecorder) MarkStepAsExecuted(ctx, idempotentKey, step, result, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkStepAsExecuted", reflect.TypeOf((*MockIdempotent)(nil).MarkStepAsExecuted), ctx, idempotentKey, step, result, err)
}

// Save mocks base method.
func (m *MockIdempotent) Save(idempotentKey string, steps []Step) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Save", idempotentKey, steps)
}

// Save indicates an expected call of Save.
func (mr *MockIdempotentMockRecorder) Save(idempotentKey, steps interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIdempotent)(nil).Save), idempotentKey, steps)
}
